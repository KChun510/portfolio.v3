{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/toastycommand/Desktop/portfolio.v3/db_actions/connection.ts"],"sourcesContent":["import Database from \"better-sqlite3\";\nimport path from \"path\";\n\nexport function openDB() {\n\t//\tconst dbPath = path.join(process.cwd(), \"user_info.db\");\n\tconst dbPath = path.join(process.cwd(), \"db_actions\", \"user_info.db\");\n\treturn new Database(dbPath, { verbose: () => { } });\n}\n\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS;IACf,2DAA2D;IAC3D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc;IACtD,OAAO,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;QAAE,SAAS,KAAQ;IAAE;AAClD","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/toastycommand/Desktop/portfolio.v3/db_actions/sessions.ts"],"sourcesContent":["import { openDB } from \"./connection\";\nexport function createSession(session_id: string, user_tag: string, song_names: string[]) {\n\tconst db = openDB()\n\tconst song_string = JSON.stringify(song_names)\n\tdb.prepare(\n\t\t\"INSERT INTO sessions (session_id, user_tag, song_names, created_at) VALUES (?, ?, ?,datetime('now'))\"\n\t).run(session_id, user_tag, song_string)\n}\n\nexport function select_all_sessions() {\n\tconst db = openDB()\n\tconst data: any = db.prepare(\"SELECT session_id, user_tag, song_names FROM sessions\").all()\n\tconst formatted_data = data.map(({ session_id, user_tag, song_names }: any) => ({\n\t\tsession: session_id,\n\t\tuser_tag,\n\t\tsong_names: JSON.parse(song_names)\n\t}));\n\n\treturn formatted_data\n}\n\nexport function updateSession(session_id: string, user_tag: string, song_names: string[]) {\n\tconst db = openDB();\n\tconst song_string = JSON.stringify(song_names)\n\n\treturn db.prepare(\n\t\t\"UPDATE sessions SET user_tag = ?, song_names = ? WHERE session_id = ?\"\n\t).run(user_tag, song_string, session_id)\n}\n\nexport function getSession(sessionId: string) {\n\tconst db = openDB()\n\treturn db.prepare(\"SELECT * FROM sessions WHERE session_id = ?\").get(sessionId)\n}\n\nexport function deleteSession(sessionId: string) {\n\tconst db = openDB()\n\tdb.prepare(\"DELETE FROM sessions WHERE session_id = ?\").run(sessionId)\n}\n\n/*\n(function main() {\n\tconsole.log(select_all_sessions())\n})()\n*/\n\n"],"names":[],"mappings":";;;;;;;AAAA;;AACO,SAAS,cAAc,UAAkB,EAAE,QAAgB,EAAE,UAAoB;IACvF,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,MAAM,cAAc,KAAK,SAAS,CAAC;IACnC,GAAG,OAAO,CACT,wGACC,GAAG,CAAC,YAAY,UAAU;AAC7B;AAEO,SAAS;IACf,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,MAAM,OAAY,GAAG,OAAO,CAAC,yDAAyD,GAAG;IACzF,MAAM,iBAAiB,KAAK,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAO,GAAK,CAAC;YAC/E,SAAS;YACT;YACA,YAAY,KAAK,KAAK,CAAC;QACxB,CAAC;IAED,OAAO;AACR;AAEO,SAAS,cAAc,UAAkB,EAAE,QAAgB,EAAE,UAAoB;IACvF,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,MAAM,cAAc,KAAK,SAAS,CAAC;IAEnC,OAAO,GAAG,OAAO,CAChB,yEACC,GAAG,CAAC,UAAU,aAAa;AAC9B;AAEO,SAAS,WAAW,SAAiB;IAC3C,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,OAAO,GAAG,OAAO,CAAC,+CAA+C,GAAG,CAAC;AACtE;AAEO,SAAS,cAAc,SAAiB;IAC9C,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,GAAG,OAAO,CAAC,6CAA6C,GAAG,CAAC;AAC7D,EAEA;;;;AAIA","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/toastycommand/Desktop/portfolio.v3/src/app/api/session/get_session/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { parse } from \"cookie\";\nimport { getSession } from \"@/../db_actions/sessions\"\nimport { export_session_data } from \"@/../db_actions/types\"\n\nexport async function GET(req: NextRequest) {\n\ttry {\n\t\tconst cookies = parse(req.headers.get(\"cookie\") || \"\");\n\t\tconst browserSessionId = cookies.session\n\n\t\tif (!browserSessionId) {\n\t\t\treturn NextResponse.json({ hasCookie: false }, {\n\t\t\t\tstatus: 200,\n\t\t\t});\n\t\t}\n\n\t\tconst { session_id, user_tag, song_names } = await getSession(browserSessionId ? browserSessionId : \"\") as export_session_data\n\n\t\tconst session = browserSessionId ? session_id : null;\n\n\t\tif (!session) { throw new Error(\"Browser session not found in DB\") }\n\n\t\treturn NextResponse.json({ hasCookie: true, session, user_tag, song_names }, {\n\t\t\tstatus: 200,\n\t\t});\n\n\t} catch (err) {\n\t\treturn NextResponse.json({ hasCookie: false }, {\n\t\t\tstatus: 401,\n\t\t\tstatusText: err as string\n\t\t});\n\t}\n}\n/* Note: Pattern looks a bit weired. But ensures a user doesn't just place a cookie in their browser */\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,GAAgB;IACzC,IAAI;QACH,MAAM,UAAU,CAAA,GAAA,yIAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa;QACnD,MAAM,mBAAmB,QAAQ,OAAO;QAExC,IAAI,CAAC,kBAAkB;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,WAAW;YAAM,GAAG;gBAC9C,QAAQ;YACT;QACD;QAEA,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,aAAU,AAAD,EAAE,mBAAmB,mBAAmB;QAEpG,MAAM,UAAU,mBAAmB,aAAa;QAEhD,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,MAAM;QAAmC;QAEnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW;YAAM;YAAS;YAAU;QAAW,GAAG;YAC5E,QAAQ;QACT;IAED,EAAE,OAAO,KAAK;QACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW;QAAM,GAAG;YAC9C,QAAQ;YACR,YAAY;QACb;IACD;AACD,EACA,qGAAqG","debugId":null}}]
}