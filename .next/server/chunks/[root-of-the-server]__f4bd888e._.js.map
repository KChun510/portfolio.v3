{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/toastycommand/Desktop/portfolio.v3/db_actions/connection.ts"],"sourcesContent":["import Database from \"better-sqlite3\";\nimport path from \"path\";\n\nexport function openDB() {\n\t//\tconst dbPath = path.join(process.cwd(), \"user_info.db\");\n\tconst dbPath = path.join(process.cwd(), \"db_actions\", \"user_info.db\");\n\treturn new Database(dbPath, { verbose: () => { } });\n}\n\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS;IACf,2DAA2D;IAC3D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc;IACtD,OAAO,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;QAAE,SAAS,KAAQ;IAAE;AAClD","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/toastycommand/Desktop/portfolio.v3/db_actions/sessions.ts"],"sourcesContent":["import { openDB } from \"./connection\";\nexport function createSession(session_id: string, user_tag: string, song_names: string[]) {\n\tconst db = openDB()\n\tconst song_string = JSON.stringify(song_names)\n\tdb.prepare(\n\t\t\"INSERT INTO sessions (session_id, user_tag, song_names, created_at) VALUES (?, ?, ?,datetime('now'))\"\n\t).run(session_id, user_tag, song_string)\n}\n\nexport function select_all_sessions() {\n\tconst db = openDB()\n\tconst data: any = db.prepare(\"SELECT user_tag, song_names FROM sessions WHERE user_tag IS NOT NULL\").all()\n\tconst formatted_data = data.map(({ user_tag, song_names }: any) => ({\n\t\tuser_tag,\n\t\tsong_names: JSON.parse(song_names)\n\t}));\n\n\treturn formatted_data\n}\n\nexport function updateSession(session_id: string, user_tag: string, song_names: string[]) {\n\tconst db = openDB();\n\tconst song_string = JSON.stringify(song_names)\n\n\treturn db.prepare(\n\t\t\"UPDATE sessions SET user_tag = ?, song_names = ? WHERE session_id = ?\"\n\t).run(user_tag, song_string, session_id)\n}\n\nexport function getSession(sessionId: string) {\n\tconst db = openDB()\n\treturn db.prepare(\"SELECT * FROM sessions WHERE session_id = ?\").get(sessionId)\n}\n\nexport function deleteSession(sessionId: string) {\n\tconst db = openDB()\n\tdb.prepare(\"DELETE FROM sessions WHERE session_id = ?\").run(sessionId)\n}\n\n\n(function main() {\n\tconsole.log(select_all_sessions())\n})()\n\n\n"],"names":[],"mappings":";;;;;;;AAAA;;AACO,SAAS,cAAc,UAAkB,EAAE,QAAgB,EAAE,UAAoB;IACvF,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,MAAM,cAAc,KAAK,SAAS,CAAC;IACnC,GAAG,OAAO,CACT,wGACC,GAAG,CAAC,YAAY,UAAU;AAC7B;AAEO,SAAS;IACf,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,MAAM,OAAY,GAAG,OAAO,CAAC,wEAAwE,GAAG;IACxG,MAAM,iBAAiB,KAAK,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAO,GAAK,CAAC;YACnE;YACA,YAAY,KAAK,KAAK,CAAC;QACxB,CAAC;IAED,OAAO;AACR;AAEO,SAAS,cAAc,UAAkB,EAAE,QAAgB,EAAE,UAAoB;IACvF,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,MAAM,cAAc,KAAK,SAAS,CAAC;IAEnC,OAAO,GAAG,OAAO,CAChB,yEACC,GAAG,CAAC,UAAU,aAAa;AAC9B;AAEO,SAAS,WAAW,SAAiB;IAC3C,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,OAAO,GAAG,OAAO,CAAC,+CAA+C,GAAG,CAAC;AACtE;AAEO,SAAS,cAAc,SAAiB;IAC9C,MAAM,KAAK,CAAA,GAAA,0HAAA,CAAA,SAAM,AAAD;IAChB,GAAG,OAAO,CAAC,6CAA6C,GAAG,CAAC;AAC7D;AAGA,CAAC,SAAS;IACT,QAAQ,GAAG,CAAC;AACb,CAAC","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///home/toastycommand/Desktop/portfolio.v3/src/app/api/session/set_session/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createSession } from '@/../db_actions/sessions'\nimport { import_session_data } from '@/../db_actions/types'\nimport { serialize } from \"cookie\";\nimport crypto from \"crypto\";\n\nexport async function POST(req: NextRequest) {\n\tconst body: import_session_data = await req.json()\n\tconst { user_tag, song_names } = body\n\tconst session_id = crypto.randomBytes(32).toString(\"hex\");\n\n\tif (true) {\n\t\tcreateSession(session_id, user_tag, song_names);\n\t\tconst response = NextResponse.json({ valid: true, message: \"Cookie Set Success\" });\n\t\tresponse.headers.set(\n\t\t\t\"Set-Cookie\",\n\t\t\tserialize(\"session\", session_id, {\n\t\t\t\thttpOnly: true,\n\t\t\t\tsecure: true,              // ✅ must be true for \"none\"\n\t\t\t\tsameSite: \"lax\",          // ✅ enables cross-origin cookie sharing\n\t\t\t\tpath: \"/\",\n\t\t\t\tmaxAge: 3600,\n\t\t\t})\n\t\t);\n\t\treturn response\n\t} else {\n\t\treturn NextResponse.json({ \"valid\": false, message: \"Login failed\" })\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IAC1C,MAAM,OAA4B,MAAM,IAAI,IAAI;IAChD,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG;IACjC,MAAM,aAAa,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;IAEnD,wCAAU;QACT,CAAA,GAAA,wHAAA,CAAA,gBAAa,AAAD,EAAE,YAAY,UAAU;QACpC,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAM,SAAS;QAAqB;QAChF,SAAS,OAAO,CAAC,GAAG,CACnB,cACA,CAAA,GAAA,yIAAA,CAAA,YAAS,AAAD,EAAE,WAAW,YAAY;YAChC,UAAU;YACV,QAAQ;YACR,UAAU;YACV,MAAM;YACN,QAAQ;QACT;QAED,OAAO;IACR,OAAO;;IAEP;AACD","debugId":null}}]
}